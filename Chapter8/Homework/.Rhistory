#load the igraph package
library(igraph)
basketball <- make_graph(~ Alice-1:2, Bonnie-1, Courtney-1:2, Deb-3:4:5,
Ellen-2, Fay-1, Gladys-3:4, Hermione-2:3)
V(basketball)$type <- bipartite_mapping(basketball)$type
xycoords <- layout_as_bipartite(basketball)
xycoords.rot <- (xycoords %*% diag(c(1,-1)))[,2:1] #rotate the coordinates appropriate
#space things out a bit
xycoords.rot <- xycoords.rot*10
xycoords.rot[,1] <- xycoords.rot[,1]*5
plot(basketball, layout = xycoords.rot, vertex.shape = c("rectangle","circle")[V(basketball)$type + 1],
vertex.color = c("green","yellow")[V(basketball)$type + 1],
vertex.size =900, vertex.size2 =500, rescale = F, ylim = c(-1,80), vertex.label.cex = 2.5,
vertex.label.dist = 1)
maximum.bipartite.matching(basketball)
directed <- graph_from_literal(s-+Alice:Bonnie:Courtney:Deb:Ellen:Fay:Gladys:Hermione,
Alice-+1:2, Bonnie-+1, Courtney-+1:2, Deb-+3:4:5,
Ellen-+2, Fay-+1, Gladys-+3:4, Hermione-+2:3,
t+-1:2:3:4:5)
xycoords <- layout_with_sugiyama(directed)$layout
xycoords.rot <- (xycoords %*% diag(c(1,-1)))[,2:1] #rotate the coordinates appropriate
#space things out a bit
xycoords.rot <- xycoords.rot*10
xycoords.rot[,1] <- xycoords.rot[,1]*5
plot(directed, layout = xycoords.rot,
vertex.size =900, rescale = F, xlim = c(-200,-50),
ylim = c(-1,80), vertex.label.cex = 2.5
)
E(directed)[max_flow(directed, "s", "t")$flow == 1]
factorial(ecount(basketball))
as_adjacency_matrix(basketball)
randomizeGraph <- function(graph){
A <- as_adjacency_matrix(graph)
n <- sample(1:ncol(A))
out <- graph_from_adjacency_matrix(A[n,n], mode = "undirected")
V(out)$type <- bipartite.mapping(out)$type
return(out)
}
players <- c("Alice","Bonnie","Courtney","Deb","Ellen","Fay","Gladys","Hermione")
sol1 <- max_bipartite_match(basketball)$matching[players]
solutions <- data.frame(t(sol1))
solutions$Iter <- 0
digests <- digest::digest(sol1) #for speed/convenience I'll keep track of hashes for data points to look for new values
for(i in 1:1e3){
newGraph <- randomizeGraph(basketball)
newsol <- max_bipartite_match(newGraph)$matching[players]
dn <- digest::digest(newsol)
if(! dn %in% digests){
digests <- c(digests, dn)
solutions <- rbind(solutions, data.frame(t(c(newsol, "Iter" = i))))
}
}
nrow(solutions)
plot(solutions$Iter, 1:nrow(solutions), xlab = "Iterations", ylab = "Cumulative Number of Solutions Found", type = "l" )
originatingNode <- unlist(lapply(lapply(strsplit(attr(E(basketball),"vnames"), "\\|"),sort),"[[",2))
nodeValues <- c(10,5,8.5,2,5,12,6,6.2)
names(nodeValues) <- players
E(basketball)$weight <- nodeValues[originatingNode]
max_bipartite_match(basketball)
playing <- matrix(as.numeric(as.matrix((solutions[,-9]))), nrow = nrow(solutions))
playing[is.na(playing)] <- 0
playing[playing > 0] <-1
expectedPts <- playing %*% nodeValues
max(expectedPts)
which(expectedPts == max(expectedPts))
length(which(expectedPts == max(expectedPts)))
